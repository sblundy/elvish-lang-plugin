{
  generate = [java="8"]
  parserClass="com.github.sblundy.elvish.lang.ElvishParser"
  parserUtilClass="com.github.sblundy.elvish.lang.ElvishParserUtils"
  parserImports = [
    'static com.intellij.lang.parser.GeneratedParserUtilBase.*'
  ]
  extends="com.github.sblundy.elvish.psi.ASTWrapperElvishPsiElement"
  implements="com.github.sblundy.elvish.psi.ElvishPsiElement"

  psiClassPrefix="Elvish"
  psiImplClassSuffix="Impl"
  psiImplUtilClass="com.github.sblundy.elvish.psi.ElvishPsiImplUtil"
  psiPackage="com.github.sblundy.elvish.psi"
  psiImplPackage="com.github.sblundy.elvish.psi.impl"

  elementTypeHolderClass="com.github.sblundy.elvish.psi.ElvishTypes"
  elementTypeClass="com.github.sblundy.elvish.psi.ElvishElementType"
  tokenTypeClass="com.github.sblundy.elvish.psi.ElvishTokenType"

  tokens=[
    COMMENT='regexp://.*'
    OPEN_BRACE="{"
    CLOSE_BRACE="}"
    OPEN_BRACKET="["
    CLOSE_BRACKET="]"
    OPEN_PARAN="("
    CLOSE_PARAN=")"
    SINGLE_QUOTE="'"
    DOUBLE_QUOTE="\""
    AMPERSAND="&"
    QUESTION="?"
    DOLLAR_SIGN="$"
    TILDE="~"
    EQUALS="="
    AT_SYMBOL="@"
    WILDCARD="*"
    INLINE_WHITESPACE="regexp:[ \t]+"
    EOL="regexp:\r|\n|\r\n"
    TEXT
    ESCAPED_QUOTED_TEXT
    INVALID_ESCAPED_QUOTED_TEXT
    PIPE="|"
    SEMICOLON=";"
    BAREWORD_CHAR="regexp:[.@%+!]"
    VARIABLE_CHAR="regexp:[0-9a-zA-Z\-_:~]"
    COMMAND_BAREWORD_CHAR="regexp:[<>*^]"
    COLON=":"
    BACKSLASH="/"
    COMMA=","
    WILDCARD="*"
    KEYWORD_ELSE="else"
    KEYWORD_ELIF="elif"
    KEYWORD_WHILE="while"
    KEYWORD_EXCEPT="except"
    KEYWORD_FINALLY="finally"
    KEYWORD_FOR="for"
    KEYWORD_IF="if"
    KEYWORD_TRY="try"
    KEYWORD_DEL="del"
    KEYWORD_FN="fn"
    KEYWORD_USE="use"
    KEYWORD_VAR="var"
    KEYWORD_SET="set"
    CONTINUATION="regexp:[\\^][\r|\n]"
  ]

  generateTokenAccessors(".*Capture")=true
}
script ::= Chunk
Chunk ::= ChuckSep* ( Pipeline ChuckSep* )* {
  methods=[getVariableDeclarations]
}
private ChuckSep ::= PipelineSep | Space
PipelineSep ::= EOL | SEMICOLON
private Space ::= INLINE_WHITESPACE
private Pipeline ::= Form Space? PipelineExtension*
private PipelineExtension ::= PIPE Space? (EOL Space?)? Form Space?
private Form ::= VarCommand | SetCommand | LegacyAssignmentOnlyForm | AllSpecialCommand | CommandForm
private LegacyAssignmentOnlyForm ::= Space? Assignment Space?

fake Block ::= {}
fake LexicalScope ::= {
  extends=Block
}
fake LambdaScope ::= LambdaArguments? Chunk {
  extends=LexicalScope
}
fake ChunkBlock ::= Chunk {
  extends=Block
}
fake NamespaceIdentifier ::= {}
fake VariableReference ::= VariableName
fake ExternalVariableReference ::= NamespaceIdentifier VariableName {
  extends=VariableReference
}
fake LValueVariable ::= VariableName
fake LValue ::= NamespaceIdentifier? VariableName VarIndex* {
  extends=LValueVariable
}

fake VariableDeclaration ::= VariableName {
  extends=LValueVariable
}
fake VariableAssignment ::= VariableName {
  extends=LValueVariable
}
fake FunctionDeclaration ::= VariableName {
  methods=[commandName="VariableName"]
}
fake Index ::= {}

// Barewords and strings
SingleQuoted ::= SINGLE_QUOTE (TEXT|ESCAPED_QUOTED_TEXT|INVALID_ESCAPED_QUOTED_TEXT)* SINGLE_QUOTE
DoubleQuoted ::= DOUBLE_QUOTE (TEXT|ESCAPED_QUOTED_TEXT|INVALID_ESCAPED_QUOTED_TEXT)* DOUBLE_QUOTE
private Primary ::= Bareword | SingleQuoted | DoubleQuoted | SpecialScopeVariableRef | NamespaceVariableRef | VariableRef | WILDCARD | TILDE | ExceptionCapture | OutputCapture | Lambda | List | Map | Braced
LegacyVariableAssignment ::= AT_SYMBOL? VariableName VarIndex* {
  extends="VariableAssignment"
  implements=[
   "LValue"
   "VariableDeclaration"
   "com.intellij.psi.PsiNameIdentifierOwner"
  ]
  methods=[getNamespaceIdentifier getNameIdentifier getName setName getTextOffset getIcon getPresentation]
}
LocalScopeVariableAssignment ::= AT_SYMBOL? LocalNamespace VariableName VarIndex* {
  extends="VariableDeclaration"
  implements=[
   "LValue"
   "VariableAssignment"
   "com.intellij.psi.PsiNameIdentifierOwner"
  ]
  methods=[NamespaceIdentifier="LocalNamespace" getNameIdentifier getName setName getTextOffset getIcon getPresentation]
}
UpScopeVariableAssignment ::= AT_SYMBOL? UpNamespace VariableName VarIndex* {
  extends="VariableAssignment"
  implements=["LValue"]
  methods=[NamespaceIdentifier="UpNamespace" getName getTextOffset getIcon getPresentation getReference]
}
NamespaceVariableAssignment ::= AT_SYMBOL? (EnvVarNamespace | BuiltinNamespace | NamespaceName) VariableName VarIndex* {
  extends="VariableAssignment"
  implements=[
   "LValue"
   "ExternalVariableReference"
  ]
  methods=[getName isWritable getTextOffset getIcon getPresentation getReference]
}
NamespaceName ::= (VariableName COLON)+ {
  extends="NamespaceIdentifier"
}
LocalNamespace ::= 'local:' {
  extends="NamespaceIdentifier"
}
UpNamespace ::= 'up:' {
  extends="NamespaceIdentifier"
}
ExternalsNamespace ::= 'e:' {
  extends="NamespaceIdentifier"
}
EnvVarNamespace ::= 'E:' {
  extends="NamespaceIdentifier"
}
BuiltinNamespace ::= 'builtin:' {
  extends="NamespaceIdentifier"
}
VariableName ::= VARIABLE_CHAR+
VariableRef ::= DOLLAR_SIGN AT_SYMBOL? VariableName VarIndex* {
  extends=VariableReference
  methods=[getReference]
  generateTokenAccessors=true
}
SpecialScopeVariableRef ::= DOLLAR_SIGN AT_SYMBOL? (LocalNamespace | UpNamespace) VariableName VarIndex* {
  extends=VariableReference
  methods=[getReference]
  generateTokenAccessors=true
}
NamespaceVariableRef ::= DOLLAR_SIGN (EnvVarNamespace | BuiltinNamespace | NamespaceName) VariableName VarIndex* {
  extends="ExternalVariableReference"
  methods=[getReference]
  generateTokenAccessors=true
}

Bareword ::= (VARIABLE_CHAR|BAREWORD_CHAR|BACKSLASH|COMMA|<<parseKeywordAsBareword>>)+
BracedBareword ::= (VARIABLE_CHAR|BAREWORD_CHAR|BACKSLASH|<<parseKeywordAsBareword>>)+
CommandBareword ::= (VARIABLE_CHAR|BAREWORD_CHAR|COMMAND_BAREWORD_CHAR|WILDCARD|BACKSLASH|EQUALS)+

// Maps and lists
Compound ::= TILDE? Indexing+
private Indexing ::= Primary VarIndex*
VarIndex ::= OPEN_BRACKET (IndexRange | IndexSingle) (Space (IndexRange | IndexSingle))* CLOSE_BRACKET {
  pin=1
  generateTokenAccessors=true
}
private IndexValue ::= VariableName | SingleQuoted | DoubleQuoted | SpecialScopeVariableRef | NamespaceVariableRef | VariableRef | ExceptionCapture | OutputCapture
IndexSingle ::= IndexValue+ {
  extends=Index
}
IndexRange ::= IndexValue* IndexRangeSeparator IndexValue* {
  extends=Index
}
private IndexRangeSeparator ::= COLON | &NewSliceIndexFlag NewSliceIndexString
private NewSliceIndexString ::= '..=' | '..'
Array ::= ArraySpace* (Compound ArraySpace*)*
private ArraySpace ::= Space | EOL
List ::= OPEN_BRACKET Array CLOSE_BRACKET
Map ::= EmptyMap | MapWithValues
private MapWithValues ::= OPEN_BRACKET ArraySpace* (MapPair ArraySpace*)+ CLOSE_BRACKET
private EmptyMap ::= OPEN_BRACKET Space? AMPERSAND Space? CLOSE_BRACKET
MapPair ::= AMPERSAND Space? Compound EQUALS Space? Compound

// Commands
Assignment ::= ((LocalScopeVariableAssignment | UpScopeVariableAssignment | NamespaceVariableAssignment | LegacyVariableAssignment) Space?)+ EQUALS Space? Compound (Space+ Compound)* {
  pin=2
  methods=[value="Compound" LValues="LValueVariable"]
}

private CommandForm ::= head (CommandSep+ argument)* AMPERSAND?
private CommandSep ::= Space | CONTINUATION
head ::= SpecialScopeCommandExpression | NamespaceCommandExpression | CommandExpression | SingleQuoted | DoubleQuoted | SpecialScopeVariableRef | NamespaceVariableRef | VariableRef | ExceptionCapture | OutputCapture
argument ::=  Redir | MapPair | Compound | ExitusRedir
fake Command ::= CommandBareword {
  methods=[commandName="CommandBareword"]
}
CommandExpression ::= CommandBareword {
  extends="Command"
  methods=[commandName="CommandBareword" getReference]
}
SpecialScopeCommandExpression ::= (LocalNamespace | UpNamespace) CommandBareword {
  extends="Command"
  methods=[commandName="CommandBareword" getReference]
}
NamespaceCommandExpression ::= (ExternalsNamespace | BuiltinNamespace | NamespaceName)  CommandBareword {
  extends="Command"
  methods=[commandName="CommandBareword" getReference]
}

ExitusRedir ::= QUESTION '>' Space? Compound
Redir ::= RedirFD? RedirMode Space? ( AMPERSAND? Compound? )
private RedirMode ::= '<' | '>' | '<>' | '>>'
private RedirFD ::= '0' | '1' | '2'

ExceptionCapture ::= QUESTION OPEN_PARAN Chunk CLOSE_PARAN
OutputCapture ::= OPEN_PARAN Chunk CLOSE_PARAN

Lambda ::= LambdaArguments? OPEN_BRACE Chunk CLOSE_BRACE {
  extends="LambdaScope"
}
LambdaArguments ::=OPEN_BRACKET Space? ((parameter | MapPair) Space?)* CLOSE_BRACKET
parameter ::= AT_SYMBOL? VariableName {
  extends="VariableDeclaration"
  implements=["com.intellij.psi.PsiNameIdentifierOwner"]
  generateTokenAccessors=true
  methods=[getNameIdentifier getName setName getIcon getPresentation]
}
Braced ::= OPEN_BRACE (Space | EOL)* BracedBareword (BracedSep* BracedBareword)* (Space | EOL)* CLOSE_BRACE
BracedSep ::= (Space | EOL)* COMMA (Space | EOL)*

// Special Commands

VarLValue ::= AT_SYMBOL? VariableName VarIndex* {
  extends="VariableAssignment"
  implements=[
   "LValue"
   "VariableDeclaration"
   "com.intellij.psi.PsiNameIdentifierOwner"
  ]
  methods=[getNamespaceIdentifier getNameIdentifier getName setName getTextOffset getIcon getPresentation]
}
VarCommand ::= &ExplicitVariableDeclarationAndSetFlag KEYWORD_VAR (Space+ VarLValue)+ (Space? EQUALS Space? Compound (Space+ Compound)*)? {
  pin=2
  implements="ElvishSpecialCommand"
  methods=[Keyword="KEYWORD_VAR" LValues="VarLValue"]
}
SetLValue ::= AT_SYMBOL? VariableName VarIndex* {
  extends="VariableAssignment"
  implements=[
   "LValue"
  ]
  methods=[getNamespaceIdentifier getName isWritable getTextOffset getIcon getPresentation getReference]
}
private SetLValues ::= (LocalScopeVariableAssignment | UpScopeVariableAssignment | NamespaceVariableAssignment | SetLValue)
SetCommand ::= &ExplicitVariableDeclarationAndSetFlag KEYWORD_SET (Space+ SetLValues)+ Space? EQUALS Space? Compound (Space+ Compound)* {
  pin=2
  implements="ElvishSpecialCommand"
  methods=[Keyword="KEYWORD_SET" LValues="LValueVariable"]
}
private AllSpecialCommand ::= DeleteCommand | UseCommand | LogicCommand | IfCommand | WhileCommand | ForCommand | TryCommand | FnCommand

private LambdaBlock ::= OPEN_BRACE Chunk CLOSE_BRACE
DeleteCommand ::= KEYWORD_DEL CommandSep* (LocalNamespace | EnvVarNamespace)? VariableName VarIndex* {
  implements="ElvishSpecialCommand"
  methods=[Keyword="KEYWORD_DEL"]
}
LogicCommand ::= LogicCMD (CommandSep* argument)* CommandSep*
private LogicCMD ::= 'or' | 'and'
private MissingLambda ::= EOL <<missingLambdaBody>>
IfCommand ::= KEYWORD_IF Space Condition Space (IfBody | MissingLambda)  {
  pin=1
  extends=ChunkBlock
  implements="ElvishSpecialCommand"
  methods=[Keyword="KEYWORD_IF"]
}
private IfBody ::= LambdaBlock (Space ElIfBlock)* (Space ElseBlock)?
Condition ::= SpecialScopeVariableRef | NamespaceVariableRef | VariableRef | ExceptionCapture | OutputCapture
ElIfBlock ::= KEYWORD_ELIF Space Condition Space (LambdaBlock | MissingLambda) {
  extends=ChunkBlock
}
ElseBlock ::= KEYWORD_ELSE Space (LambdaBlock | MissingLambda) {
  extends=ChunkBlock
}
WhileCommand ::= KEYWORD_WHILE Space Condition Space (WhileCommandBody | MissingLambda) {
  extends=ChunkBlock
  implements="ElvishSpecialCommand"
  methods=[Keyword="KEYWORD_WHILE"]
}
private WhileCommandBody ::= OPEN_BRACE Chunk CLOSE_BRACE (Space ElseBlock)?
ForCommand ::= KEYWORD_FOR Space VariableName Space Collection Space (ForCommandBody | MissingLambda) {
  extends=ChunkBlock
  implements=["ElvishSpecialCommand" "VariableDeclaration"]
  methods=[Keyword="KEYWORD_FOR"]
}
private ForCommandBody ::= OPEN_BRACE Chunk CLOSE_BRACE (Space ElseBlock)?
Collection ::= List | Map | SpecialScopeVariableRef | NamespaceVariableRef | VariableRef | ExceptionCapture | OutputCapture
TryCommand ::= KEYWORD_TRY Space LambdaBlock (Space ExceptBlock)? (Space ElseBlock)? (Space FinallyBlock)? {
  extends=ChunkBlock
  implements="ElvishSpecialCommand"
  methods=[Keyword="KEYWORD_TRY"]
}
ExceptBlock ::= KEYWORD_EXCEPT Space VariableName Space OPEN_BRACE Chunk CLOSE_BRACE {
  extends=ChunkBlock
  implements=VariableDeclaration
}
FinallyBlock ::= KEYWORD_FINALLY Space LambdaBlock {
  extends=ChunkBlock
}
FnCommand ::= KEYWORD_FN Space VariableName Space LambdaArguments? OPEN_BRACE Chunk CLOSE_BRACE {
  extends="FunctionDeclaration"
  implements=["LambdaScope" "com.intellij.psi.PsiNameIdentifierOwner" "ElvishSpecialCommand" ]
  methods=[Keyword="KEYWORD_FN" commandName="VariableName" getNameIdentifier getName setName getTextOffset getIcon getPresentation]
}
UseCommand ::= KEYWORD_USE Space (RelativeModuleSpec | LibModuleSpec) (Space ModuleAlias)? {
  implements="ElvishSpecialCommand"
  methods=[Keyword="KEYWORD_USE"]
}
fake ModuleSpec ::= {}

LibModuleSpec ::= (VARIABLE_CHAR+'.')* ModulePathSegment* (VariableName COLON)* VariableName {
  extends="ModuleSpec"
}
RelativeModuleSpec ::= &UseRelativeModulesFlag RelativeModuleSpecInner {
  extends="ModuleSpec"
}
private RelativeModuleSpecInner ::= ('./' | '../') (ModulePathSegment | './' | '../')* (VariableName COLON)* VariableName
private ModulePathSegment ::= VARIABLE_CHAR+ BACKSLASH
ModuleAlias ::= &UseWithOptionalRenameFlag VariableName

private external ExplicitVariableDeclarationAndSetFlag ::= ifFlag "ExplicitVariableDeclarationAndSet"
private external UseWithOptionalRenameFlag ::= ifFlag "UseWithOptionalRename"
private external UseRelativeModulesFlag ::= ifFlag "UseRelativeModules"
private external NewSliceIndexFlag ::= ifFlag "NewSliceIndex"
