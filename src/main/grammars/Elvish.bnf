{
  parserClass="com.github.sblundy.elvish.lang.ElvishParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Elvish"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.sblundy.elvish.psi"
  psiImplPackage="com.github.sblundy.elvish.psi.impl"

  elementTypeHolderClass="com.github.sblundy.elvish.psi.ElvishTypes"
  elementTypeClass="com.github.sblundy.elvish.psi.ElvishElementType"
  tokenTypeClass="com.github.sblundy.elvish.psi.ElvishTokenType"

  tokens=[
    COMMENT='regexp://.*'
    OPEN_BRACE="open_brace"
    CLOSE_BRACE="close_brace"
    OPEN_BRACKET="open_bracket"
    CLOSE_BRACKET="close_bracket"
    OPEN_PARAN="open_paran"
    CLOSE_PARAN="close_paran"
    SINGLE_QUOTE="'"
    DOUBLE_QUOTE="\""
    AMPERSAND="&"
    TILDA="~"
    EQUALS="="
    INLINE_WHITESPACE="regexp:[ \t]+"
    EOL="regexp:\r|\n|\r\n"
    TEXT="."
    KEYWORD_ELSE="else"
    KEYWORD_ELIF="elif"
    KEYWORD_WHILE="while"
    KEYWORD_EXCEPT="except"
    KEYWORD_FINALLY="finally"
    KEYWORD_FOR="for"
    KEYWORD_IF="if"
    KEYWORD_TRY="try"
    KEYWORD_DEL="del"
    ESCAPED_QUOTED_TEXT="escaped_sequence"
    INVALID_ESCAPED_QUOTED_TEXT="invalid_escaped_sequence"
    CONTINUATION="continuation"
    REF_MARKER="$"
    PIPE="pipe"
    BUILTIN_OPERATOR_FN
  ]
  mixin("variable_declaration")="com.github.sblundy.elvish.psi.ElvishVariableDeclarationMixin"
}

script ::= line* <<eof>>
private line ::= (command COMMENT line_terminator) | (command line_terminator) | (COMMENT line_terminator) | line_terminator | command | COMMENT
pipeline ::= pipeline_prv
private pipeline_head ::= pipeline_prv | ordinary_command
private pipeline_prv ::= ordinary_command PIPE pipeline_head
private command ::= delete_statement | if_statement | while_statement | for_statement | try_statement | assignment | pipeline | ordinary_command
ordinary_command ::= head argument_list
private argument_list ::= argument_list_line argument_list_continuation*
private argument_list_line ::= argument*
private argument_list_continuation ::= CONTINUATION argument*
argument ::= bareword | single_quoted_string | double_quoted_string | variable_ref
head ::= bareword | BUILTIN_OPERATOR_FN
assignment ::= assignment_left EQUALS assignment_right
private assignment_right ::= output_capture | single_quoted_string | double_quoted_string | bareword
private assignment_left ::= variable_name(variable_index)?
escaped_sequence ::= ESCAPED_QUOTED_TEXT
invalid_escape_sequence ::= INVALID_ESCAPED_QUOTED_TEXT
private TEXT_CHR ::= TEXT | invalid_escape_sequence | escaped_sequence
string ::= TEXT_CHR*
single_quoted_string ::= SINGLE_QUOTE string SINGLE_QUOTE
double_quoted_string ::= DOUBLE_QUOTE string DOUBLE_QUOTE
line_terminator ::= EOL+
output_capture ::= pipeline_output_body | command_outpub_body
private command_outpub_body ::= OPEN_PARAN ordinary_command CLOSE_PARAN
private pipeline_output_body ::= OPEN_PARAN pipeline CLOSE_PARAN

// statements

if_statement ::= KEYWORD_IF condition block elif_statement* else_statement?
try_statement ::= KEYWORD_TRY block except_statement? else_statement? finally_statement?
while_statement ::= KEYWORD_WHILE condition block else_statement?
for_statement ::= KEYWORD_FOR variable_declaration collection block else_statement?
delete_statement ::= KEYWORD_DEL variable_name(variable_index)?

elif_statement ::= KEYWORD_ELIF condition block
else_statement ::= KEYWORD_ELSE block
except_statement ::= KEYWORD_EXCEPT variable_declaration block
finally_statement ::= KEYWORD_FINALLY block

condition ::= variable_ref | output_capture
collection ::= variable_ref | output_capture
block ::= OPEN_BRACE line* CLOSE_BRACE

// variables

variable_declaration ::= variable_name {
    implements="com.intellij.psi.PsiNamedElement"
}
variable_ref ::= (REF_MARKER)variable_name(variable_index)?
private variable_index ::= (OPEN_BRACKET)bareword(CLOSE_BRACKET)
private variable_name ::= bareword