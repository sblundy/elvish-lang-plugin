{
  parserClass="com.github.sblundy.elvish.lang.ElvishParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Elvish"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.sblundy.elvish.psi"
  psiImplPackage="com.github.sblundy.elvish.psi.impl"

  elementTypeHolderClass="com.github.sblundy.elvish.psi.ElvishTypes"
  elementTypeClass="com.github.sblundy.elvish.psi.ElvishElementType"
  tokenTypeClass="com.github.sblundy.elvish.psi.ElvishTokenType"

  tokens=[
    COMMENT='regexp://.*'
    LEFT_BRACE="{"
    RIGHT_BRACE="}"
    LEFT_BRACKET="["
    RIGHT_BRACKET="]"
    LEFT_PAREN="("
    RIGHT_PAREN=")"
    SINGLE_QUOTE="'"
    DOUBLE_QUOTE="\""
    AMPERSAND="&"
    TILDA="~"
    EQUALS="="
    INLINE_WHITESPACE="regexp:[ \t]+"
    EOL="regexp:\r|\n|\r\n"
    TEXT="."
    ESCAPED_SINGLE_QUOTED_TEXT="\\'"
    CONTINUATION="continuation"
    REF_MARKER="$"
    PIPE="pipe"
  ]
}

script ::= line* <<eof>>
line ::= (command COMMENT line_terminator) | (command line_terminator) | (COMMENT line_terminator) | line_terminator | command | COMMENT
pipeline ::= pipeline_prv
private pipeline_head ::= pipeline_prv | ordinary_command
private pipeline_prv ::= ordinary_command PIPE pipeline_head
command ::= assignment | pipeline | ordinary_command
ordinary_command ::= head argument_list
argument_list ::= argument_list_line argument_list_continuation*
argument_list_line ::= argument*
argument_list_continuation ::= CONTINUATION argument*
argument ::= bareword | single_quoted_string | variable_ref
head ::= bareword
assignment ::= assignment_start single_quoted_string
assignment_start ::= variable EQUALS
variable ::= bareword
variable_ref ::= REF_MARKER(bareword)
private TEXT_CHR ::= TEXT | ESCAPED_SINGLE_QUOTED_TEXT
string ::= TEXT_CHR*
single_quoted_string ::= SINGLE_QUOTE string SINGLE_QUOTE
line_terminator ::= EOL+