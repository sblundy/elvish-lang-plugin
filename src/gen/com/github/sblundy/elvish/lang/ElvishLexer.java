/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package com.github.sblundy.elvish.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.github.sblundy.elvish.psi.ElvishTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/steve/Projects/elivish-lang-plugin/src/main/grammars/Elvish.flex</tt>
 */
class ElvishLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_SINGLE_QUOTE_STRING = 2;
  public static final int IN_DOUBLE_QUOTE_STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\46\1\1\2\62\1\45\22\0\1\46\1\36\1\55\1\2\1\60\1\41\1\56\1\54\1\52"+
    "\1\53\1\42\1\41\1\43\1\41\1\43\1\41\10\7\2\5\1\43\1\0\1\40\1\37\1\40\1\0\1"+
    "\44\6\14\16\44\1\4\5\44\1\51\1\3\1\13\1\11\1\44\1\0\1\31\1\16\1\12\1\35\1"+
    "\17\1\23\1\43\1\25\1\22\2\43\1\20\1\43\1\30\1\33\1\26\1\43\1\34\1\21\1\27"+
    "\1\6\1\15\1\24\1\10\1\32\1\43\1\47\1\61\1\50\1\57\6\0\1\62\242\0\2\62\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\7\4\1\7\2\5\1\2\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\24\1\26\1\3\2\27\2\4\1\30"+
    "\5\4\1\5\1\31\6\32\4\4\1\33\1\4\1\34"+
    "\1\35\4\0\1\4\1\36\1\37\2\4\2\0\2\4"+
    "\1\40\1\0\1\41\1\4\1\0\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[83];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\231\0\314\0\377\0\u0132"+
    "\0\231\0\231\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264"+
    "\0\u0297\0\u02ca\0\u02fd\0\u0132\0\u0330\0\u0363\0\231\0\231"+
    "\0\231\0\231\0\231\0\231\0\231\0\231\0\231\0\231"+
    "\0\231\0\231\0\u0396\0\u03c9\0\231\0\u03fc\0\231\0\u042f"+
    "\0\u0462\0\u0495\0\u0132\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594"+
    "\0\u05c7\0\231\0\231\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6"+
    "\0\u06f9\0\u072c\0\u075f\0\u0792\0\u0132\0\u07c5\0\u0132\0\u0132"+
    "\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u0132\0\u0132\0\u08f7"+
    "\0\u092a\0\u095d\0\u0693\0\u0990\0\u09c3\0\u0132\0\u09f6\0\u0132"+
    "\0\u0a29\0\u062d\0\u0132";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[83];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\5\10\1\11\1\10\1\12"+
    "\3\10\1\13\2\10\1\14\1\15\1\16\2\10\1\17"+
    "\5\10\1\20\1\21\1\22\1\23\1\24\1\11\2\10"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\4\54\42\1\43"+
    "\11\42\1\44\51\42\1\45\5\42\63\0\1\6\1\46"+
    "\61\6\1\0\1\47\43\0\1\50\21\0\5\10\1\0"+
    "\1\10\1\0\23\10\2\0\1\10\1\0\2\10\22\0"+
    "\4\10\1\51\1\0\1\10\1\0\4\10\1\52\16\10"+
    "\2\0\1\10\1\0\2\10\22\0\5\10\1\0\1\10"+
    "\1\0\7\10\1\53\13\10\2\0\1\10\1\0\2\10"+
    "\22\0\5\10\1\0\1\10\1\0\6\10\1\54\10\10"+
    "\1\55\3\10\2\0\1\10\1\0\2\10\22\0\5\10"+
    "\1\0\1\10\1\0\11\10\1\56\11\10\2\0\1\10"+
    "\1\0\2\10\22\0\5\10\1\0\1\10\1\0\20\10"+
    "\1\57\2\10\2\0\1\10\1\0\2\10\22\0\5\10"+
    "\1\0\1\10\1\0\3\10\1\60\17\10\2\0\1\10"+
    "\1\0\2\10\22\0\5\10\1\0\1\10\1\0\23\10"+
    "\1\61\1\0\1\10\1\0\2\10\55\0\1\61\44\0"+
    "\1\11\15\0\1\61\24\0\1\5\127\0\1\26\70\0"+
    "\1\62\6\0\1\63\1\0\1\63\1\62\1\64\1\63"+
    "\1\65\1\66\1\67\2\70\2\63\3\62\3\63\1\62"+
    "\3\63\3\62\2\63\1\62\10\63\1\0\7\63\1\62"+
    "\4\63\2\0\1\46\43\0\1\46\16\0\1\47\65\0"+
    "\5\10\1\0\1\71\1\0\23\10\2\0\1\10\1\0"+
    "\2\10\22\0\5\10\1\0\1\10\1\0\5\10\1\72"+
    "\1\73\14\10\2\0\1\10\1\0\2\10\22\0\5\10"+
    "\1\0\1\10\1\0\14\10\1\74\6\10\2\0\1\10"+
    "\1\0\2\10\22\0\5\10\1\0\1\10\1\0\20\10"+
    "\1\75\2\10\2\0\1\10\1\0\2\10\22\0\5\10"+
    "\1\0\1\10\1\0\6\10\1\76\14\10\2\0\1\10"+
    "\1\0\2\10\22\0\5\10\1\0\1\10\1\0\16\10"+
    "\1\77\4\10\2\0\1\10\1\0\2\10\22\0\5\10"+
    "\1\0\1\10\1\0\4\10\1\100\16\10\2\0\1\10"+
    "\1\0\2\10\37\0\1\11\46\0\1\101\1\0\1\101"+
    "\2\0\1\101\1\0\1\101\1\0\2\101\3\0\1\101"+
    "\5\0\1\101\3\0\1\101\32\0\1\102\1\0\1\102"+
    "\2\0\1\102\1\0\1\102\1\0\2\102\3\0\1\102"+
    "\5\0\1\102\3\0\1\102\34\0\1\103\60\0\1\104"+
    "\1\0\1\104\2\0\1\104\1\0\1\104\1\0\2\104"+
    "\3\0\1\104\5\0\1\104\3\0\1\104\30\0\2\62"+
    "\4\0\1\62\1\0\2\62\27\0\1\62\4\0\1\62"+
    "\15\0\5\10\1\0\1\10\1\0\3\10\1\105\17\10"+
    "\2\0\1\10\1\0\2\10\22\0\5\10\1\0\1\10"+
    "\1\0\3\10\1\106\17\10\2\0\1\10\1\0\2\10"+
    "\22\0\5\10\1\0\1\10\1\0\7\10\1\107\13\10"+
    "\2\0\1\10\1\0\2\10\22\0\5\10\1\0\1\10"+
    "\1\0\15\10\1\110\5\10\2\0\1\10\1\0\2\10"+
    "\22\0\5\10\1\0\1\10\1\0\4\10\1\111\16\10"+
    "\2\0\1\10\1\0\2\10\23\0\1\112\1\0\1\112"+
    "\2\0\1\112\1\0\1\112\1\0\2\112\3\0\1\112"+
    "\5\0\1\112\3\0\1\112\32\0\1\113\1\0\1\113"+
    "\2\0\1\113\1\0\1\113\1\0\2\113\3\0\1\113"+
    "\5\0\1\113\3\0\1\113\34\0\1\62\60\0\1\62"+
    "\1\0\1\62\2\0\1\62\1\0\1\62\1\0\2\62"+
    "\3\0\1\62\5\0\1\62\3\0\1\62\31\0\5\10"+
    "\1\0\1\10\1\0\12\10\1\114\10\10\2\0\1\10"+
    "\1\0\2\10\22\0\5\10\1\0\1\10\1\0\4\10"+
    "\1\115\16\10\2\0\1\10\1\0\2\10\22\0\5\10"+
    "\1\0\1\10\1\0\3\10\1\116\17\10\2\0\1\10"+
    "\1\0\2\10\23\0\1\117\1\0\1\117\2\0\1\117"+
    "\1\0\1\117\1\0\2\117\3\0\1\117\5\0\1\117"+
    "\3\0\1\117\31\0\5\10\1\0\1\10\1\0\13\10"+
    "\1\120\7\10\2\0\1\10\1\0\2\10\22\0\5\10"+
    "\1\0\1\10\1\0\4\10\1\121\16\10\2\0\1\10"+
    "\1\0\2\10\23\0\1\122\1\0\1\122\2\0\1\122"+
    "\1\0\1\122\1\0\2\122\3\0\1\122\5\0\1\122"+
    "\3\0\1\122\31\0\5\10\1\0\1\10\1\0\16\10"+
    "\1\123\4\10\2\0\1\10\1\0\2\10\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2652];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\3\1\2\11\14\1\14\11\2\1\1\11"+
    "\1\1\1\11\12\1\2\11\15\1\4\0\5\1\2\0"+
    "\3\1\1\0\2\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[83];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ElvishLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return null;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 35: break;
          case 2: 
            { return ElvishTypes.EOL;
            } 
            // fall through
          case 36: break;
          case 3: 
            { return ElvishTypes.COMMENT;
            } 
            // fall through
          case 37: break;
          case 4: 
            { return ElvishTypes.BAREWORD;
            } 
            // fall through
          case 38: break;
          case 5: 
            { return ElvishTypes.BUILTIN_OPERATOR_FN;
            } 
            // fall through
          case 39: break;
          case 6: 
            { return ElvishTypes.CLOSE_BRACKET;
            } 
            // fall through
          case 40: break;
          case 7: 
            { return ElvishTypes.EQUALS;
            } 
            // fall through
          case 41: break;
          case 8: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 42: break;
          case 9: 
            { return ElvishTypes.OPEN_BRACE;
            } 
            // fall through
          case 43: break;
          case 10: 
            { return ElvishTypes.CLOSE_BRACE;
            } 
            // fall through
          case 44: break;
          case 11: 
            { return ElvishTypes.OPEN_BRACKET;
            } 
            // fall through
          case 45: break;
          case 12: 
            { return ElvishTypes.OPEN_PARAN;
            } 
            // fall through
          case 46: break;
          case 13: 
            { return ElvishTypes.CLOSE_PARAN;
            } 
            // fall through
          case 47: break;
          case 14: 
            { yybegin(IN_SINGLE_QUOTE_STRING);
                                return ElvishTypes.SINGLE_QUOTE;
            } 
            // fall through
          case 48: break;
          case 15: 
            { yybegin(IN_DOUBLE_QUOTE_STRING);
                                return ElvishTypes.DOUBLE_QUOTE;
            } 
            // fall through
          case 49: break;
          case 16: 
            { return ElvishTypes.AMPERSAND;
            } 
            // fall through
          case 50: break;
          case 17: 
            { return ElvishTypes.TILDA;
            } 
            // fall through
          case 51: break;
          case 18: 
            { return ElvishTypes.REF_MARKER;
            } 
            // fall through
          case 52: break;
          case 19: 
            { return ElvishTypes.PIPE;
            } 
            // fall through
          case 53: break;
          case 20: 
            { return ElvishTypes.TEXT;
            } 
            // fall through
          case 54: break;
          case 21: 
            { yybegin(YYINITIAL);
                                return ElvishTypes.SINGLE_QUOTE;
            } 
            // fall through
          case 55: break;
          case 22: 
            { yybegin(YYINITIAL);
                                return ElvishTypes.DOUBLE_QUOTE;
            } 
            // fall through
          case 56: break;
          case 23: 
            { return ElvishTypes.CONTINUATION;
            } 
            // fall through
          case 57: break;
          case 24: 
            { return ElvishTypes.KEYWORD_IF;
            } 
            // fall through
          case 58: break;
          case 25: 
            { return ElvishTypes.ESCAPED_QUOTED_TEXT;
            } 
            // fall through
          case 59: break;
          case 26: 
            { return ElvishTypes.INVALID_ESCAPED_QUOTED_TEXT;
            } 
            // fall through
          case 60: break;
          case 27: 
            { return ElvishTypes.KEYWORD_FOR;
            } 
            // fall through
          case 61: break;
          case 28: 
            { return ElvishTypes.KEYWORD_TRY;
            } 
            // fall through
          case 62: break;
          case 29: 
            { return ElvishTypes.KEYWORD_DEL;
            } 
            // fall through
          case 63: break;
          case 30: 
            { return ElvishTypes.KEYWORD_ELSE;
            } 
            // fall through
          case 64: break;
          case 31: 
            { return ElvishTypes.KEYWORD_ELIF;
            } 
            // fall through
          case 65: break;
          case 32: 
            { return ElvishTypes.KEYWORD_WHILE;
            } 
            // fall through
          case 66: break;
          case 33: 
            { return ElvishTypes.KEYWORD_EXCEPT;
            } 
            // fall through
          case 67: break;
          case 34: 
            { return ElvishTypes.KEYWORD_FINALLY;
            } 
            // fall through
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
