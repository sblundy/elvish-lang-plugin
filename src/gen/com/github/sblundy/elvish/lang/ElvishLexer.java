/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package com.github.sblundy.elvish.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.intellij.util.containers.IntArrayList;

import com.github.sblundy.elvish.lang.version.LanguageParseFlag;
import com.github.sblundy.elvish.psi.ElvishTypes;

import java.util.EnumSet;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/steve/Projects/elvish-lang-plugin/src/main/grammars/Elvish.flex</tt>
 */
class ElvishLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_SINGLE_QUOTE_STRING = 2;
  public static final int IN_DOUBLE_QUOTE_STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 7, 3]
   * Total runtime size is 9136 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<7)|((ch>>3)&0x7f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\2\23\6\15\1\24\1\25\u0400\23");

  /* The ZZ_CMAP_Y table has 2816 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\3"+
    "\0\133\17\1\20\1\21\1\22\2\17\1\23\61\17\1\24\3\17\1\25\2\24\4\17\1\26\1\24"+
    "\6\17\1\0\3\17\1\27\1\30\1\0\3\17\1\31\35\17\1\32\7\17\1\33\14\17\1\34\1\0"+
    "\7\17\1\27\5\17\1\35\1\17\1\25\3\17\1\36\10\0\2\17\1\31\1\35\2\0\1\21\25\17"+
    "\1\37\1\40\1\41\2\17\1\42\1\43\1\44\1\40\1\45\1\46\1\47\1\50\2\17\1\51\1\52"+
    "\1\53\1\41\2\17\1\42\1\54\1\55\1\53\1\56\1\57\1\60\1\61\1\17\1\35\1\0\1\52"+
    "\1\32\1\23\2\17\1\42\1\62\1\44\1\32\1\63\1\64\1\0\1\50\1\17\1\34\1\57\1\52"+
    "\1\40\1\41\2\17\1\42\1\62\1\44\1\40\1\56\1\61\1\47\1\50\2\17\1\0\1\65\1\66"+
    "\1\67\1\70\1\71\1\66\1\17\1\72\1\66\1\67\1\73\1\0\1\61\2\17\1\27\1\37\1\31"+
    "\1\42\2\17\1\42\1\17\1\74\1\31\1\67\1\75\1\27\1\50\1\17\1\0\1\17\1\37\1\31"+
    "\1\42\2\17\1\42\1\37\1\44\1\31\1\67\1\75\1\76\1\50\1\17\1\77\1\0\1\52\1\31"+
    "\1\42\4\17\1\33\1\31\1\42\1\21\1\17\1\50\3\17\1\65\1\17\1\25\1\20\2\17\1\23"+
    "\1\100\1\25\1\101\1\102\1\17\1\61\1\17\1\103\1\0\1\24\6\17\1\53\3\17\1\51"+
    "\4\0\1\104\1\105\1\21\1\24\1\106\1\65\1\17\1\63\1\102\1\35\1\17\1\44\4\0\11"+
    "\17\1\24\3\17\1\30\1\24\4\17\1\24\3\17\1\31\1\17\1\31\1\17\1\27\4\0\30\17"+
    "\1\32\1\107\57\17\1\67\1\25\1\67\5\17\1\67\4\17\1\67\1\25\1\67\1\17\1\25\7"+
    "\17\1\67\10\17\1\33\3\17\1\30\3\17\1\34\12\17\2\35\123\17\1\30\13\17\1\64"+
    "\1\17\1\31\1\30\1\0\2\17\1\25\1\0\2\17\1\51\1\0\1\17\1\31\1\110\1\0\13\17"+
    "\1\35\1\17\1\34\1\17\1\34\1\17\1\25\1\17\1\34\13\17\1\0\5\17\1\27\10\17\1"+
    "\35\1\0\3\17\1\25\1\17\1\51\1\17\1\51\1\111\4\17\1\35\1\30\1\0\5\17\1\51\3"+
    "\17\1\34\1\17\1\66\7\17\1\50\7\17\1\25\3\17\1\40\1\17\1\34\1\17\1\34\1\17"+
    "\1\35\1\17\1\25\10\0\11\17\1\51\5\17\1\30\16\17\1\51\1\21\7\17\1\112\1\17"+
    "\1\74\7\17\1\64\6\0\1\17\1\0\4\17\1\25\1\34\36\17\1\35\1\112\42\17\2\35\4"+
    "\17\2\35\1\17\1\113\3\17\1\35\6\17\1\31\1\17\1\31\1\17\1\50\1\37\2\17\1\114"+
    "\1\25\5\17\1\115\6\17\1\31\1\17\1\44\2\17\1\25\1\17\1\30\3\17\1\25\2\0\4\17"+
    "\1\64\1\0\21\17\1\51\115\17\1\25\4\17\1\25\3\0\1\17\1\27\2\0\342\17\1\50\3"+
    "\17\1\35\4\17\1\74\1\17\1\42\1\34\2\0\1\21\2\0\5\17\1\25\5\17\1\25\22\17\1"+
    "\51\1\24\4\17\1\32\1\107\7\17\1\46\1\64\1\46\2\17\1\25\1\0\10\25\14\17\1\30"+
    "\7\0\3\17\1\23\12\17\1\51\1\0\32\17\1\35\3\0\1\17\1\51\10\17\1\24\11\17\1"+
    "\25\1\24\14\17\1\116\4\17\1\35\1\24\12\17\1\25\5\17\1\27\4\17\1\51\1\0\5\17"+
    "\1\25\33\17\1\25\326\17\1\35\1\0\302\17\1\35\5\0\21\17\1\30\6\17\1\25\1\0"+
    "\53\17\1\51\2\0\27\17\1\0\25\17\1\25\1\17\7\0\1\46\6\17\1\51\1\17\1\34\7\17"+
    "\1\0\10\17\1\35\1\61\1\17\1\34\3\17\1\35\12\17\1\51\1\46\3\17\1\30\11\17\1"+
    "\32\1\17\1\72\3\17\1\25\6\17\1\25\1\0\1\17\1\35\1\17\1\44\14\17\1\27\2\0\1"+
    "\112\2\17\1\25\1\0\3\117\1\0\2\25\6\17\1\35\1\0\17\17\1\35\1\17\1\34\164\17"+
    "\1\51\1\0\2\17\1\25\1\112\5\17\1\51\200\0\115\17\1\35\15\17\1\34\4\0\1\25"+
    "\1\0\1\112\1\116\2\17\1\25\1\102\1\120\17\17\1\34\1\0\1\112\55\17\2\0\10\17"+
    "\1\20\6\17\5\0\1\17\1\35\3\17\1\34\6\17\1\121\1\17\1\25\1\51\1\31\20\17\1"+
    "\40\1\24\26\17\1\25\3\20\1\103\2\25\1\0\1\122");

  /* The ZZ_CMAP_A table has 664 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\51\1\1\2\67\1\50\2\0\1\51\1\36\1\62\1\2\1\52\1\36\1\63\1\61\1\57\1"+
    "\60\1\47\1\36\1\46\1\41\1\36\1\45\10\10\2\6\1\44\1\66\1\40\1\37\1\40\1\56"+
    "\1\43\6\14\16\42\1\5\5\42\1\55\1\3\1\13\1\4\1\42\1\0\1\31\1\16\1\12\1\35\1"+
    "\17\1\23\1\41\1\25\1\22\2\41\1\20\1\41\1\30\1\33\1\26\1\41\1\34\1\21\1\27"+
    "\1\7\1\15\1\24\1\11\1\32\1\41\1\53\1\65\1\54\1\64\6\0\1\67\2\0\10\41\2\0\6"+
    "\41\4\0\7\41\1\0\1\41\1\0\4\41\1\0\5\41\1\0\16\41\2\0\2\41\2\0\6\41\5\0\5"+
    "\41\3\0\5\41\1\0\10\41\1\0\4\41\2\0\5\41\6\0\6\41\2\0\4\41\2\0\1\41\1\0\4"+
    "\41\1\0\10\41\2\0\2\41\2\0\6\41\1\0\7\41\1\0\1\41\3\0\4\41\2\0\5\41\2\0\4"+
    "\41\10\0\1\41\4\0\2\41\1\0\5\41\2\0\6\41\5\0\3\41\1\0\6\41\4\0\2\41\1\0\2"+
    "\41\1\0\2\41\1\0\2\41\2\0\1\41\1\0\3\41\2\0\3\41\3\0\1\41\7\0\4\41\1\0\1\41"+
    "\7\0\3\41\1\0\2\41\1\0\5\41\1\0\3\41\2\0\1\41\11\0\2\41\1\0\6\41\3\0\3\41"+
    "\1\0\4\41\3\0\2\41\1\0\1\41\1\0\2\41\3\0\2\41\3\0\2\41\4\0\3\41\6\0\3\41\3"+
    "\0\3\41\5\0\2\41\7\0\1\41\2\0\2\41\5\0\4\41\1\0\1\41\4\0\1\41\4\0\6\41\1\0"+
    "\1\41\3\0\3\41\4\0\2\41\1\0\1\41\2\0\2\41\1\0\1\41\2\0\1\41\3\0\3\41\1\0\1"+
    "\41\1\0\1\41\5\0\1\41\2\0\1\41\1\0\2\41\4\0\1\41\3\0\4\41\3\0\5\41\1\0\1\41"+
    "\1\0\1\41\1\0\1\41\1\0\1\41\2\0\3\41\1\0\2\41\2\67\6\41\5\0\3\41\1\0\6\41"+
    "\1\0\2\41\1\0\2\41\1\0\5\41\1\0\4\41\1\0\5\41\2\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\1\1\4\2\5\1\6"+
    "\10\5\1\7\1\10\1\4\1\11\1\12\1\13\1\14"+
    "\1\15\1\2\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\34\1\0\1\36\1\3\2\37\2\40"+
    "\5\5\1\41\1\5\1\42\4\5\1\43\6\44\1\45"+
    "\1\46\3\5\1\47\1\5\1\50\1\5\1\51\1\52"+
    "\4\0\1\5\1\53\1\54\2\5\2\0\2\5\1\55"+
    "\1\0\1\56\1\5\1\0\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[101];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\250\0\340\0\u0118\0\u0150"+
    "\0\u0188\0\u01c0\0\250\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8"+
    "\0\u0310\0\u0348\0\u0380\0\u03b8\0\250\0\u03f0\0\u03b8\0\250"+
    "\0\250\0\250\0\u03f0\0\u0428\0\u0460\0\250\0\250\0\250"+
    "\0\250\0\250\0\250\0\250\0\250\0\250\0\250\0\u0188"+
    "\0\250\0\250\0\u0498\0\u04d0\0\u0508\0\u0540\0\250\0\u0578"+
    "\0\250\0\u05b0\0\250\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8"+
    "\0\u0700\0\u0188\0\u0738\0\u0188\0\u0770\0\u07a8\0\u07e0\0\u0818"+
    "\0\250\0\250\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0188"+
    "\0\u0188\0\u0968\0\u09a0\0\u09d8\0\u0188\0\u0a10\0\u0188\0\u0a48"+
    "\0\u0188\0\u0188\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0188"+
    "\0\u0188\0\u0b98\0\u0bd0\0\u0c08\0\u0930\0\u0c40\0\u0c78\0\u0188"+
    "\0\u0cb0\0\u0188\0\u0ce8\0\u08c0\0\u0188";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[101];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\2\11\1\12\3\11"+
    "\1\13\1\11\1\14\1\11\1\15\1\11\1\16\1\17"+
    "\1\20\1\21\2\11\1\22\5\11\1\23\1\24\1\25"+
    "\1\26\2\11\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\4\61\53"+
    "\1\54\6\53\3\55\1\56\56\55\1\57\5\55\70\0"+
    "\1\6\1\60\66\6\1\0\1\61\46\0\1\62\20\0"+
    "\1\63\2\0\1\26\33\0\1\26\6\0\1\26\1\64"+
    "\24\0\6\11\1\0\22\11\3\0\2\11\21\0\1\11"+
    "\10\0\6\11\1\0\5\11\1\65\14\11\3\0\2\11"+
    "\21\0\1\11\10\0\6\11\1\0\15\11\1\66\4\11"+
    "\3\0\2\11\21\0\1\11\10\0\4\11\1\67\1\11"+
    "\1\0\4\11\1\70\15\11\3\0\2\11\21\0\1\11"+
    "\10\0\6\11\1\0\3\11\1\71\16\11\3\0\2\11"+
    "\21\0\1\11\10\0\6\11\1\0\7\11\1\72\12\11"+
    "\3\0\2\11\21\0\1\11\10\0\6\11\1\0\6\11"+
    "\1\73\5\11\1\74\2\11\1\75\2\11\3\0\2\11"+
    "\21\0\1\11\10\0\6\11\1\0\11\11\1\76\10\11"+
    "\3\0\2\11\21\0\1\11\10\0\6\11\1\0\20\11"+
    "\1\77\1\11\3\0\2\11\21\0\1\11\10\0\6\11"+
    "\1\0\3\11\1\100\16\11\3\0\2\11\21\0\1\11"+
    "\41\0\1\24\4\0\1\24\30\0\1\26\33\0\1\26"+
    "\6\0\1\26\21\0\1\5\137\0\1\35\16\0\61\53"+
    "\1\0\6\53\61\0\1\101\6\0\3\55\1\0\56\55"+
    "\1\0\5\55\1\102\1\0\1\102\1\101\1\103\1\104"+
    "\1\102\1\105\1\106\1\107\1\103\2\102\3\101\3\102"+
    "\1\101\3\102\3\101\2\102\1\101\13\102\1\0\11\102"+
    "\1\101\4\102\2\0\1\60\46\0\1\60\20\0\1\61"+
    "\67\0\1\63\73\0\6\11\1\0\3\11\1\110\16\11"+
    "\3\0\2\11\21\0\1\11\10\0\6\11\1\0\20\11"+
    "\1\111\1\11\3\0\2\11\21\0\1\11\10\0\5\11"+
    "\1\112\1\0\22\11\3\0\2\11\21\0\1\11\10\0"+
    "\6\11\1\0\5\11\1\113\1\114\13\11\3\0\2\11"+
    "\21\0\1\11\10\0\6\11\1\0\13\11\1\115\6\11"+
    "\3\0\2\11\21\0\1\11\10\0\6\11\1\0\14\11"+
    "\1\116\5\11\3\0\2\11\21\0\1\11\10\0\6\11"+
    "\1\0\20\11\1\117\1\11\3\0\2\11\21\0\1\11"+
    "\10\0\6\11\1\0\6\11\1\120\13\11\3\0\2\11"+
    "\21\0\1\11\10\0\6\11\1\0\16\11\1\121\3\11"+
    "\3\0\2\11\21\0\1\11\10\0\6\11\1\0\4\11"+
    "\1\122\15\11\3\0\2\11\21\0\1\11\6\0\3\101"+
    "\5\0\2\101\25\0\2\101\11\0\1\101\20\0\1\123"+
    "\1\0\1\123\1\0\1\123\1\0\1\123\1\0\2\123"+
    "\3\0\1\123\5\0\1\123\3\0\1\123\40\0\1\124"+
    "\1\0\1\124\1\0\1\124\1\0\1\124\1\0\2\124"+
    "\3\0\1\124\5\0\1\124\3\0\1\124\42\0\1\125"+
    "\65\0\1\126\1\0\1\126\1\0\1\126\1\0\1\126"+
    "\1\0\2\126\3\0\1\126\5\0\1\126\3\0\1\126"+
    "\37\0\6\11\1\0\3\11\1\127\16\11\3\0\2\11"+
    "\21\0\1\11\10\0\6\11\1\0\3\11\1\130\16\11"+
    "\3\0\2\11\21\0\1\11\10\0\6\11\1\0\7\11"+
    "\1\131\12\11\3\0\2\11\21\0\1\11\10\0\6\11"+
    "\1\0\15\11\1\132\4\11\3\0\2\11\21\0\1\11"+
    "\10\0\6\11\1\0\4\11\1\133\15\11\3\0\2\11"+
    "\21\0\1\11\11\0\1\134\1\0\1\134\1\0\1\134"+
    "\1\0\1\134\1\0\2\134\3\0\1\134\5\0\1\134"+
    "\3\0\1\134\40\0\1\135\1\0\1\135\1\0\1\135"+
    "\1\0\1\135\1\0\2\135\3\0\1\135\5\0\1\135"+
    "\3\0\1\135\42\0\1\101\65\0\1\101\1\0\1\101"+
    "\1\0\1\101\1\0\1\101\1\0\2\101\3\0\1\101"+
    "\5\0\1\101\3\0\1\101\37\0\6\11\1\0\12\11"+
    "\1\136\7\11\3\0\2\11\21\0\1\11\10\0\6\11"+
    "\1\0\4\11\1\137\15\11\3\0\2\11\21\0\1\11"+
    "\10\0\6\11\1\0\3\11\1\140\16\11\3\0\2\11"+
    "\21\0\1\11\11\0\1\141\1\0\1\141\1\0\1\141"+
    "\1\0\1\141\1\0\2\141\3\0\1\141\5\0\1\141"+
    "\3\0\1\141\37\0\6\11\1\0\13\11\1\142\6\11"+
    "\3\0\2\11\21\0\1\11\10\0\6\11\1\0\4\11"+
    "\1\143\15\11\3\0\2\11\21\0\1\11\11\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\2\144"+
    "\3\0\1\144\5\0\1\144\3\0\1\144\37\0\6\11"+
    "\1\0\16\11\1\145\3\11\3\0\2\11\21\0\1\11"+
    "\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3360];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\5\1\1\11\11\1\1\11\2\1\3\11"+
    "\3\1\12\11\1\1\2\11\3\1\1\0\1\11\1\1"+
    "\1\11\1\1\1\11\15\1\2\11\20\1\4\0\5\1"+
    "\2\0\3\1\1\0\2\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[101];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    final IntArrayList states = new IntArrayList();

    private void yyPushState(int newState) {
        states.add(yystate());
        yybegin(newState);
    }

    private void yyPopState() {
        int prevState = states.remove(states.size() - 1);
        yybegin(prevState);
    }

    public EnumSet<LanguageParseFlag> parseFlags = EnumSet.noneOf(LanguageParseFlag.class);

    private IElementType yyCheckContinuation() {
        if (parseFlags.contains(LanguageParseFlag.CarrotContinuation)) {
            return ElvishTypes.CONTINUATION;
        }
        yypushback(1);
        return ElvishTypes.COMMAND_BAREWORD_CHAR;
    }
    private IElementType yyCheckVarKeyword() {
        if (parseFlags.contains(LanguageParseFlag.ExplicitVariableDeclarationAndSet)) {
            return ElvishTypes.KEYWORD_VAR;
        }
        yypushback(1);
        return ElvishTypes.VARIABLE_CHAR;
    }
    private IElementType yyCheckSetKeyword() {
        if (parseFlags.contains(LanguageParseFlag.ExplicitVariableDeclarationAndSet)) {
            return ElvishTypes.KEYWORD_SET;
        }
        yypushback(1);
        return ElvishTypes.VARIABLE_CHAR;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ElvishLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return null;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 48: break;
          case 2: 
            { return ElvishTypes.EOL;
            } 
            // fall through
          case 49: break;
          case 3: 
            { return ElvishTypes.COMMENT;
            } 
            // fall through
          case 50: break;
          case 4: 
            { return ElvishTypes.COMMAND_BAREWORD_CHAR;
            } 
            // fall through
          case 51: break;
          case 5: 
            { return ElvishTypes.VARIABLE_CHAR;
            } 
            // fall through
          case 52: break;
          case 6: 
            { return ElvishTypes.CLOSE_BRACKET;
            } 
            // fall through
          case 53: break;
          case 7: 
            { return ElvishTypes.BAREWORD_CHAR;
            } 
            // fall through
          case 54: break;
          case 8: 
            { return ElvishTypes.EQUALS;
            } 
            // fall through
          case 55: break;
          case 9: 
            { return ElvishTypes.AT_SYMBOL;
            } 
            // fall through
          case 56: break;
          case 10: 
            { return ElvishTypes.COLON;
            } 
            // fall through
          case 57: break;
          case 11: 
            { return ElvishTypes.BACKSLASH;
            } 
            // fall through
          case 58: break;
          case 12: 
            { return ElvishTypes.COMMA;
            } 
            // fall through
          case 59: break;
          case 13: 
            { return ElvishTypes.WILDCARD;
            } 
            // fall through
          case 60: break;
          case 14: 
            { return ElvishTypes.INLINE_WHITESPACE;
            } 
            // fall through
          case 61: break;
          case 15: 
            { return ElvishTypes.DOLLAR_SIGN;
            } 
            // fall through
          case 62: break;
          case 16: 
            { return ElvishTypes.OPEN_BRACE;
            } 
            // fall through
          case 63: break;
          case 17: 
            { return ElvishTypes.CLOSE_BRACE;
            } 
            // fall through
          case 64: break;
          case 18: 
            { return ElvishTypes.OPEN_BRACKET;
            } 
            // fall through
          case 65: break;
          case 19: 
            { return ElvishTypes.QUESTION;
            } 
            // fall through
          case 66: break;
          case 20: 
            { return ElvishTypes.OPEN_PARAN;
            } 
            // fall through
          case 67: break;
          case 21: 
            { return ElvishTypes.CLOSE_PARAN;
            } 
            // fall through
          case 68: break;
          case 22: 
            { yyPushState(IN_SINGLE_QUOTE_STRING);
                                return ElvishTypes.SINGLE_QUOTE;
            } 
            // fall through
          case 69: break;
          case 23: 
            { yyPushState(IN_DOUBLE_QUOTE_STRING);
                                return ElvishTypes.DOUBLE_QUOTE;
            } 
            // fall through
          case 70: break;
          case 24: 
            { return ElvishTypes.AMPERSAND;
            } 
            // fall through
          case 71: break;
          case 25: 
            { return ElvishTypes.TILDE;
            } 
            // fall through
          case 72: break;
          case 26: 
            { return ElvishTypes.PIPE;
            } 
            // fall through
          case 73: break;
          case 27: 
            { return ElvishTypes.SEMICOLON;
            } 
            // fall through
          case 74: break;
          case 28: 
            { return ElvishTypes.TEXT;
            } 
            // fall through
          case 75: break;
          case 29: 
            { yyPopState();
                                return ElvishTypes.SINGLE_QUOTE;
            } 
            // fall through
          case 76: break;
          case 30: 
            { yyPopState();
                                return ElvishTypes.DOUBLE_QUOTE;
            } 
            // fall through
          case 77: break;
          case 31: 
            { return ElvishTypes.CONTINUATION;
            } 
            // fall through
          case 78: break;
          case 32: 
            { return yyCheckContinuation();
            } 
            // fall through
          case 79: break;
          case 33: 
            { return ElvishTypes.KEYWORD_IF;
            } 
            // fall through
          case 80: break;
          case 34: 
            { return ElvishTypes.KEYWORD_FN;
            } 
            // fall through
          case 81: break;
          case 35: 
            { return ElvishTypes.ESCAPED_QUOTED_TEXT;
            } 
            // fall through
          case 82: break;
          case 36: 
            { return ElvishTypes.INVALID_ESCAPED_QUOTED_TEXT;
            } 
            // fall through
          case 83: break;
          case 37: 
            { return ElvishTypes.KEYWORD_USE;
            } 
            // fall through
          case 84: break;
          case 38: 
            { return yyCheckVarKeyword();
            } 
            // fall through
          case 85: break;
          case 39: 
            { return yyCheckSetKeyword();
            } 
            // fall through
          case 86: break;
          case 40: 
            { return ElvishTypes.KEYWORD_FOR;
            } 
            // fall through
          case 87: break;
          case 41: 
            { return ElvishTypes.KEYWORD_TRY;
            } 
            // fall through
          case 88: break;
          case 42: 
            { return ElvishTypes.KEYWORD_DEL;
            } 
            // fall through
          case 89: break;
          case 43: 
            { return ElvishTypes.KEYWORD_ELSE;
            } 
            // fall through
          case 90: break;
          case 44: 
            { return ElvishTypes.KEYWORD_ELIF;
            } 
            // fall through
          case 91: break;
          case 45: 
            { return ElvishTypes.KEYWORD_WHILE;
            } 
            // fall through
          case 92: break;
          case 46: 
            { return ElvishTypes.KEYWORD_EXCEPT;
            } 
            // fall through
          case 93: break;
          case 47: 
            { return ElvishTypes.KEYWORD_FINALLY;
            } 
            // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
